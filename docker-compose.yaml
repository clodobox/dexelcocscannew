version: '3'

services:
  ocr:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:latest
        ENV DEBIAN_FRONTEND=noninteractive
        RUN apt-get clean autoclean
        RUN apt-get autoremove --yes
        RUN rm -rf /var/lib/{apt,dpkg,cache,log}/
        RUN apt -y update && apt -y upgrade
        RUN apt -y install python3 python3-pip ocrmypdf tesseract-ocr-fra tesseract-ocr-deu
        RUN apt-get -y autoclean
        RUN mkdir ocr
        COPY watcher.py ocr/watcher.py
        RUN pip3 install --no-deps pipreqs
        RUN pip3 install yarg docopt
        RUN pipreqs --debug --mode no-pin /ocr
        RUN pip install -r ocr/requirements.txt
        RUN mv ocr/watcher.py /watcher.py
        RUN rm -rf ocr
        # COPY run-watcher.sh run-watcher.sh
        # COPY watcher.py watcher.py
        # RUN chmod 777 watcher.py
        # RUN chown 1026:100 watcher.py
        ENTRYPOINT ["/bin/bash"]
    user: 1032:100
    volumes:
      - ./run-watcher.sh:/run-watcher.sh
    # Download last version of watcher
    #   + If it doesn't work, remove the "wget" line in "dockerfile_inline"
    #
    #  - ./watcher.py:/watcher.py
    #
    # Input / Output folder location (NFS / Local)
    #   + Check "Volumes" bellow for NFS server details
    #   + Use of NFS need "Polling - true" in .env
    #
    # local
    #
    #  - ./scan-input:/scan-input
    #  - ./ocr-output:/ocr-output
    #
    # NFS
    #
      - scan-input:/scan-input
      - ocr-output:/ocr-output
    # Don't try to put environmental variables here.
    # Docker-compose doesn't support JSON.
    env_file:
      - .env
    command:
      - run-watcher.sh
  renamer:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:latest
        RUN apt-get clean autoclean
        RUN apt-get autoremove --yes
        RUN rm -rf /var/lib/{apt,dpkg,cache,log}/
        RUN apt -y update && apt -y upgrade
        RUN apt -y install python3 python3-watchdog python3-pdfminer
        RUN apt-get -y autoclean
        # COPY run-renamer.sh run-renamer.sh
        # COPY RenameMyPDF.py RenameMyPDF.py
        # RUN chmod 777 RenameMyPDF.py
        # RUN chown 1026:100 RenameMyPDF.py
        ENTRYPOINT ["/bin/bash"]
        CMD ["python3 RenameMyPDF.py"]
    user: 1026:101
    volumes:
      - ./run-renamer.sh:/run-renamer.sh
      - ./RenameMyPDF.py:/RenameMyPDF.py
    #local
    #  - ./ocr-output:/ocr-output
    #  - ./final-output:/final-output
    #NFS
      - ocr-output:/ocr-output
      - final-output:/final-output
    command: run-renamer.sh
# NFS Volumes
#   + Not needed for local mount point
volumes:
  scan-input:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.45.29,nfsvers=4,sec=sys,proto=tcp"
      device: ":/volume1/Docker/CoC/scan-input"
  ocr-output:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.45.29,nfsvers=4,sec=sys,proto=tcp"
      device: ":/volume1/Docker/CoC/ocr-output"
  final-output:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.45.29,nfsvers=4,sec=sys,proto=tcp"
      device: ":/volume1/Docker/CoC/final-output"